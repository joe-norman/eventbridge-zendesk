AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar
Description: 'sam-app Sample SAM Template for sam-app

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Zendesk-AWS-EventBridge
    Description: This application analyzes Zendesk tickets for negative sentiment,
      tags them as 'negative' and applies a customizable escalation time frame. It
      also translates tickets, finds keywords, and sends them to S3 for analysis.
    Author: Joe Norman
    SpdxLicenseId: MIT-0
    LicenseUrl: s3://nojosep-sam/c4237cb282e57ea03a579d66a652cb3f
    ReadmeUrl: s3://nojosep-sam/faeb4756d848fb57353531a0c2c4dcd9
    Labels:
    - zendesk
    - moderation
    - sentiment
    - lambda
    - eventbridge
    - comprehend
    HomePageUrl: https://github.com/joe-norman/eventbridge-zendesk
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/joe-norman/eventbridge-zendesk
Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda
      functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for
      which resources are provisioned and deployed.
    Default: ''
  ZenDeskUsernameKey:
    Description: Your agent username that will connect to the Zedesk API - email
    Type: AWS::SSM::Parameter::Value<String>
    Default: ZenDeskUsername
  ZenDeskTokenKey:
    Description: Your API Token
    Type: AWS::SSM::Parameter::Value<String>
    Default: ZenDeskToken
  ZenDeskDomainKey:
    Description: Your Unique Zendesk Domain name (excluding https:// and .com)
    Type: AWS::SSM::Parameter::Value<String>
    Default: ZenDeskDomain
  SLAUrgentWait:
    Description: Urgent priority SLA wait time in seconds
    Type: String
    Default: 120
  SLAHighWait:
    Description: High priority SLA wait time in seconds
    Type: String
    Default: 120
  SLANormalWait:
    Description: Normal priority SLA wait time in seconds
    Type: String
    Default: 120
  S3_Bucket_Analytics:
    Description: S3 bucket name for dropping data used in Analytics
    Type: String
    Default: ''
  EventSourceName:
    Description: The event source name generated by the Zendesk connector
    Type: String
    Default: ''
Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role:
        Ref: CodeDeployRole
Resources:
  ZenDeskDemoGetFullTicket:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/c5f1111a763c474df66c83812a960131
      Handler: getFullTicket.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          ZenDeskUsername:
            Ref: ZenDeskUsernameKey
          ZenDeskPassword:
            Ref: ZenDeskTokenKey
          ZenDeskDomain:
            Ref: ZenDeskDomainKey
  ZenDeskDemoGetSentiment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/0b397a7571aaea5e7986f1a66523979a
      Handler: getSentiment.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyLambdaExecutionRole
        - Arn
      Environment: null
  ZenDeskDemoSetTags:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/c3e97116a6fcb9252c059ade795dfdd5
      Handler: setTags.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          ZenDeskUsername:
            Ref: ZenDeskUsernameKey
          ZenDeskPassword:
            Ref: ZenDeskTokenKey
          ZenDeskDomain:
            Ref: ZenDeskDomainKey
  ZenDeskDemoSetPriority:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/0c26d78bb7cd4bb99e076a228928397c
      Handler: setPriority.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyLambdaExecutionRole
        - Arn
      Environment:
        Variables:
          ZenDeskUsername:
            Ref: ZenDeskUsernameKey
          ZenDeskPassword:
            Ref: ZenDeskTokenKey
          ZenDeskDomain:
            Ref: ZenDeskDomainKey
  ZenDeskDemoTranslateTicket:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/5391cfb8ea7c1d49b4e730b3a091508a
      Handler: translateTicket.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyTranslateTextExecutionRole
        - Arn
  ZenDeskWriteToS3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://nojosep-sam/de9e1b26701155e72bc43ccef64785c5
      Handler: writeToS3.handler
      Runtime: nodejs10.x
      Role:
        Fn::GetAtt:
        - MyWriteToS3ExecutionRole
        - Arn
      Environment:
        Variables:
          S3_Bucket_Analytics:
            Ref: S3_Bucket_Analytics
  ZendDemoStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n   \"Comment\": \"Understand the ticket sentiment, apply tags\
          \ and check back when answered to ensure SLA's are met\",\n   \"StartAt\"\
          : \"FullTicketInfo\",\n   \"States\": {\n\n     \"FullTicketInfo\": {\n\
          \       \"Type\" : \"Task\",\n       \"Resource\": \"${ZenDeskDemoGetFullTicket.Arn}\"\
          ,\n       \"InputPath\":  \"$.detail.ticket_event.ticket\",\n       \"ResultPath\"\
          : \"$\",\n       \"Next\": \"TranslateTicket\"\n     },\n     \n     \"\
          TranslateTicket\": {\n        \"Type\": \"Task\",\n        \"Resource\"\
          : \"${ZenDeskDemoTranslateTicket.Arn\",\n        \"InputPath\": \"$\",\n\
          \        \"ResultPath\": \"$\",\n        \"OutputPath\": \"$\",\n      \
          \  \"Next\": \"GetTopics\"\n     },\n     \n     \"GetTopics\": {\n    \
          \    \"Type\": \"Task\",\n        \"Resource\": \"${ZenDeskDemoGetTopics.Arn\"\
          ,\n        \"InputPath\": \"$\",\n        \"ResultPath\": \"$.topics\",\n\
          \        \"OutputPath\": \"$\",\n        \"Next\": \"GetSentiment\"\n  \
          \   },\n\n     \"GetSentiment\": {\n       \"Type\": \"Task\",\n       \"\
          Resource\": \"${ZenDeskDemoGetSentiment.Arn}\",\n       \"InputPath\": \"\
          $.raw_subject\",\n       \"ResultPath\": \"$.sentiment\",\n       \"OutputPath\"\
          : \"$\",\n       \"Next\": \"WriteToS3\"\n     },\n     \n     \"WriteToS3\"\
          : {\n       \"Type\": Task\",\n       \"Resource\": \"${ZenDeskDemoWriteToS3.Arn}\"\
          ,\n       \"InputPath\": \"$\",\n       \"ResultPath\": \"$.sentToAnalytics\"\
          ,\n       \"OutputPath\": \"$\",\n       \"Next\": \"isNegative\"\n    \
          \ },\n\n     \"isNegative\": {\n       \"Type\" : \"Choice\",\n       \"\
          Choices\": [\n         {\n           \"Variable\": \"$.sentiment.Sentiment\"\
          ,\n           \"StringEquals\": \"NEGATIVE\",\n           \"Next\": \"FullTicketInfo\"\
          \n         }\n       ],\n       \"Default\": \"ClosedOrNotNegative\"\n \
          \    },\n \n     \"setTags\": {\n       \"Type\" : \"Task\",\n       \"\
          Resource\": \"${ZenDeskDemoSetTags.Arn}\",\n       \"ResultPath\": \"$.tags\"\
          ,\n       \"OutputPath\": \"$\",\n       \"Next\": \"isClosed\"\n     },\n\
          \     \n     \n  \"GetSLAWaitTime\": {\n       \"Type\" : \"Choice\",\n\
          \       \"Choices\": [\n         {\n           \"Variable\": \"$.priority\"\
          ,\n           \"StringEquals\": \"normal\",\n           \"Next\": \"SLAHighWait\"\
          \n         },\n         {\n           \"Variable\": \"$.priority\",\n  \
          \         \"StringEquals\": \"high\",\n           \"Next\": \"SLAUrgentWait\"\
          \n         },\n         {\n           \"Variable\": \"$.priority\",\n  \
          \         \"StringEquals\": \"urgent\",\n           \"Next\": \"FinalEscalationState\"\
          \n         }\n       ],\n        \"Default\": \"SLANormalWait\"\n      \
          \  \n     },\n     \n    \"FinalEscalationState\": {\n            \"Comment\"\
          \ : \"Ticket cannot be escalated further\",\n            \"Type\": \"Succeed\"\
          \n        },\n     \n     \"EscalatePriority\": {\n         \"Type\" : \"\
          Task\",\n         \"Resource\": \"${ZenDeskDemoSetPriority.Arn}\",\n   \
          \      \"InputPath\":  \"$\",\n         \"ResultPath\": \"$\",\n       \
          \  \"Next\": \"isClosed\"\n     },\n\n     \"SLANormalWait\": {\n      \
          \   \"Type\": \"Wait\",\n         \"Seconds\": ${SLANormalWait},\n     \
          \    \"Next\": \"EscalatePriority\"\n       },\n       \n       \"SLAHighWait\"\
          : {\n         \"Type\": \"Wait\",\n         \"Seconds\": ${SLAHighWait},\n\
          \         \"Next\": \"EscalatePriority\"\n       },\n       \n       \n\
          \       \"SLAUrgentWait\": {\n         \"Type\": \"Wait\",\n         \"\
          Seconds\":${SLAUrgentWait},\n         \"Next\": \"EscalatePriority\"\n \
          \      },\n\n     \"isClosed\": {\n       \"Type\" : \"Choice\",\n     \
          \  \"Choices\": [\n         {\n           \"Variable\": \"$.status\",\n\
          \           \"StringEquals\": \"open\",\n           \"Next\": \"GetSLAWaitTime\"\
          \n         },\n         {\n           \"Variable\": \"$.status\",\n    \
          \       \"StringEquals\": \"new\",\n           \"Next\": \"GetSLAWaitTime\"\
          \n         }\n       ],\n       \"Default\": \"ClosedOrNotNegative\"\n \
          \    },\n    \n     \"ClosedOrNotNegative\": {\n         \"Type\": \"Pass\"\
          ,\n         \"Result\": {\n           \"x-datum\": 1,\n           \"y-datum\"\
          : 1\n         },\n         \"ResultPath\": \"$.coords\",\n         \"End\"\
          : true\n       }\n                           \n   }\n }\n"
      RoleArn:
        Fn::GetAtt:
        - MyStatesExecutionRole
        - Arn
  MyLambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: CodeStar-${ProjectId}-Execution${Stage}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/ComprehendFullAccess
  MyStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - comprehend:DetectSentiment
            Resource: '*'
  MyWriteToS3ExecutionRole:
    Description: Lambda service role to write to Analytics S3 Bucket
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: CodeStar-${ProjectId}-Execution${Stage}-WriteToS3LambdaRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
          - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          Policies:
          - PolicyName: WriteToS3ExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - s3:PutObject
                Resource:
                  Fn::Sub: arn:aws:s3:::$(S3_Bucket_Analytics)
  MyTranslateTextExecutionRole:
    Description: Lambda role for Translate Text function
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: CodeStar-${ProjectId}-Execution${Stage}-TranslateTextLambdaRole
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/TranslateFullAccess
  ZendeskEventBus:
    Type: AWS::Events::EventBus
    Properties:
      EventSourceName:
        Ref: EventSourceName
      Name:
        Ref: EventSourceName
  MyEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events Rule with StepFunctionParams
      EventBusName:
        Ref: EventSourceName
      EventPattern:
        account:
        - Ref: AWS::AccountId
        detail-type:
        - 'Support Ticket: Ticket Created'
      Targets:
      - Arn: '!Ref ZendDemoStateMachine'
        RoleArn: "Fn::GetAtt:\n  - MyStatesExecutionRole\n  - Arn"
        Id: NewTicketSFN
    DependsOn:
    - ZendeskEventBus
    - ZendDemoStateMachine
    - MyStatesExecutionRole
